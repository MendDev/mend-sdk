class t extends Error{constructor(s,e,i){super(s),this.name="MendError",this.code=e,this.status=i,Object.setPrototypeOf(this,t.prototype)}}const s={SDK_CONFIG:"SDK_CONFIG",AUTH_MISSING_TOKEN:"AUTH_MISSING_TOKEN",AUTH_MFA_REQUIRED:"AUTH_MFA_REQUIRED",AUTH_INVALID_MFA:"AUTH_INVALID_MFA",ORG_NOT_FOUND:"ORG_NOT_FOUND",HTTP_ERROR:"HTTP_ERROR"};class e{constructor(t){var s;this.apiEndpoint=t.apiEndpoint.replace(/\/$/,""),this.defaultHeaders=null!==(s=t.defaultHeaders)&&void 0!==s?s:{}}async fetch(e,i,a,n={},r={},o){const h=Object.keys(n).length?"?"+new URLSearchParams(n).toString():"",d=this.apiEndpoint+i+h,l={"Content-Type":"application/json",Accept:"application/json",...this.defaultHeaders,...r},c=await fetch(d,{method:e,headers:l,body:a?JSON.stringify(a):void 0,signal:o});if(!c.ok)throw new t(`HTTP ${c.status} â€“ ${c.statusText}`,s.HTTP_ERROR,c.status);const u=await c.text();return u?JSON.parse(u):void 0}}class i{constructor(){this.mutex=Promise.resolve()}async lock(t){let s;const e=new Promise((t=>{s=t})),i=this.mutex;this.mutex=this.mutex.then((()=>e)),await i;try{return await t()}finally{s()}}}class a{constructor(a){var n,r;if(this.authMutex=new i,this.activeOrgId=null,this.availableOrgs=null,this.jwt=null,this.jwtExpiresAt=0,!(null==a?void 0:a.apiEndpoint)||!(null==a?void 0:a.email)||!(null==a?void 0:a.password))throw new t("apiEndpoint, email and password are required",s.SDK_CONFIG);this.httpClient=(r={apiEndpoint:a.apiEndpoint,defaultHeaders:a.defaultHeaders},new e(r)),this.email=a.email,this.password=a.password,this.orgId=a.orgId,this.mfaCode=a.mfaCode,this.tokenTTL=null!==(n=a.tokenTTL)&&void 0!==n?n:55}async authenticate(){const e=await this.httpClient.fetch("POST","/session",{email:this.email,password:this.password},{},{});if(e.token)await this.completeLogin(e);else{if(void 0===this.mfaCode)throw new t("JWT not returned by /session",s.AUTH_MISSING_TOKEN);await this.submitMfaCode(this.mfaCode)}}async completeLogin(e){var i,a;const n=e.token;if(!n)throw new t("JWT not returned by /session",s.AUTH_MISSING_TOKEN);this.jwt=n,this.jwtExpiresAt=Date.now()+6e4*this.tokenTTL;const r=null==e?void 0:e.payload;if(Array.isArray(null==r?void 0:r.orgs)&&(this.availableOrgs=r.orgs),void 0!==this.orgId)await this.switchOrg(this.orgId);else{if(!this.availableOrgs){const t=await this.listOrgs();this.availableOrgs=Array.isArray(null==t?void 0:t.payload)?t.payload:null===(i=null==t?void 0:t.payload)||void 0===i?void 0:i.orgs}if(Array.isArray(this.availableOrgs)&&1===this.availableOrgs.length){const t=this.availableOrgs[0],s=null!==(a=t.id)&&void 0!==a?a:t.orgId;s&&await this.switchOrg(s)}}}async ensureAuth(){this.jwt&&Date.now()<this.jwtExpiresAt||await this.authMutex.lock((async()=>{(!this.jwt||Date.now()>=this.jwtExpiresAt)&&await this.authenticate()}))}async request(t,s,e,i,a){await this.ensureAuth();const n={};return this.jwt&&(n["X-Access-Token"]=this.jwt),this.httpClient.fetch(t,s,e,i||{},n,a)}async getOrg(t,s){return this.request("GET",`/org/${t}`,void 0,void 0,s)}async getUser(t,s){return this.request("GET",`/user/${t}`,void 0,void 0,s)}async searchPatients(t={},s){return this.request("GET","/patient",void 0,t,s)}async getPatient(t,s){return this.request("GET",`/patient/${t}`,void 0,void 0,s)}async getPatientAssessmentScores(t,s){return this.request("GET",`/patient/${t}/assessment-scores`,void 0,void 0,s)}async createPatient(t,s=!1,e){const i=s?"/patient/force":"/patient";return this.request("POST",i,t,void 0,e)}async updatePatient(t,s,e=!1,i){const a=e?`/patient/${t}/force`:`/patient/${t}`;return this.request("PUT",a,s,void 0,i)}async deletePatient(t,s){return this.request("DELETE",`/patient/${t}`,void 0,void 0,s)}async getAppointment(t,s){return this.request("GET",`/appointment/${t}`,void 0,void 0,s)}async createAppointment(t,s){return this.request("POST","/appointment",t,void 0,s)}async listOrgs(t){return this.request("GET","/org",void 0,void 0,t)}async submitMfaCode(t,s){const e={};this.jwt&&(e["X-Access-Token"]=this.jwt);const i=await this.httpClient.fetch("PUT","/session/mfa",{mfaCode:t},{},e,s);await this.completeLogin(i)}async switchOrg(t,s){await this.request("PUT",`/session/org/${t}`,{},void 0,s),this.activeOrgId=t}async getProperties(t){return this.request("GET","/property",void 0,void 0,t)}async getProperty(t,s){var e,i;const a=await this.getProperties(s);return null===(i=null===(e=null==a?void 0:a.payload)||void 0===e?void 0:e.properties)||void 0===i?void 0:i[t]}}export{s as ERROR_CODES,t as MendError,a as MendSdk,a as default};
